/* Prototypes for the Transcend server library */
#ifndef trans_lib_prototypes_h
#define trans_lib_prototypes_h

#include "company.h"

int check_disk_space(
    int disk_index,
    unsigned long long file_size);


int check_disk_usage(unsigned long long file_size);

int get_random_index(void);

void transweb_table_rtv(void);

/* Contains all code used to do the file deletion and other checks */
void cron_dlt_all(void);

int cron_dlt_files(char *file_path, char *list[]);

int dlt_empty_global_files(char *file_path);

void dlt_history_files(int num[2]);

int dlt_keyword_entries(void);

void dlt_old_sites(char *site_array[]);

#ifdef TRANSCEND
/* Delete entries with no valid core ID */
void dlt_x500(void);
#endif

/* Builds array with site entries from specified year */
void site_array_build(char *site_array[], char *year);

void reg_restore(void);

/* Verify registry has not been corrupted */
void reg_check(void);

char file_type_get(char *file_name);

void get_release(char *key);

void keyword_create(
    char *new_keyword,	/* New keyword generated by this function */
    char *key,	/* Different string used for each transaction */
    int index);	/* Helps make the key more random */

/* See if keyword is for this site */
/* Send to different server if not meant for this site */
/* If is secure keyword, translate to file keyword */
int keyword_find(
    char *old_key,	/* Encrypted key to be deccrypted */
    char *new_key);	/* Decrypted key */
int send2owner(char *keyword);

/* Map extension to defined company */





void log_history_file(char *key);

void lookup_keyword(
    char *old_key,
    char *new_key,	/* Holds decrypted key if found */
    char *user_email1,
    char *user_email2);

int mod_lock_cnt(int value);


/* Remove duplicate lines from input file and creates output file */
void rmv_dups(char *input_file, char *output_file);
void query_user(int req_type, char *user_id);

void trans_site_read(char *user_id);
int disk_usage_check(char *msg);

/* Look for user in global email or company email file */
int search_email_file(char *owner, char *file_name);
/* Retrieve status attributes for data */
void status_big_file(char *keyword);


/* Return history in format client expects */
void transweb_history(char *key);

/* Look up user in local TransWeb registry */
int transweb_reg_check(void);

/* Add user to TransWeb registry */
int transweb_reg_add(char *file_name, char *user_id);

int transweb_mod_lock_cnt(int increment);

/* Look up site extension in db_admin/company_extension */
void extension_lookup(char extension, TRANS_REPOSITORY *site);

/* Find server nearest user using his IP node address */
/* Find extension for closest server */
char server_find(void);

/* Set the server to the closest server */
void server_set(void);


void transweb_company_rtv(void);

void transweb_repository_rtv(void);

void transweb_keyword_read(void);

/* Decide if request should be logged */
/* File passed in holds info about requests to be logged */
int log_request(char *log_file_name);


/* Log a tansaction in report or transfer log */
void transaction_log(char *keyword, char *file_name, char *mask,
    char *status, char *msg, char *log_prefix);

int user_keys_delete(void);

/* Convert integer string to hours, minutes and seconds */
void hms_calc(long seconds, char *string);

void mm_email_send(char *file_name, char file_type, char *description, char *file_size_string, char *user_key, char *local_time, char *gmt_time, char *email_addr, char *msg_ptr);

/* Add new entry to TransWeb registry */
int transweb_reg_add(char *file_name, char *user_id);

long dlt_time_calc(char *current_gmt_time, char *dlt_time_string, char *gmt_time_string);


void support_add(char *email_file);

void support_delete(char *email_file);

int support_check(char *email_file);

/* Verify authorized to retrieve keywords sent to support@nxp.com */
int support_auth_check(char *email_addr);
int maillist_auth_check(char *auth_email);




/* Verify authorized to retrieve keywords sent to support@nxp.com */
int mica_auth_check(char *email_addr);


/* Verify keyword is not a bad 4 letter word */
void keyword_verify(char *key);

int keyword_lookup(
    char *old_key,
    char *new_key);	/* Holds decrypted key if found */

int keyword_auth_check(char *email);

/* Log result for transaction in the log file */
int log_request(char *file_name);

int tcp_listen(int db_socket);

void server_options_init(int argc, char **argv, int *db_socket, char *file_name);

/* Make directories needed for the server */
void server_dir_make(void);

/* Find extension based on region found */
char extension_find(char *region);

/* Initialize params common to the servers */
void server_params_init(void);

/*
 * Blacklist Find:
 *      allow blocking a given request based on the client's origin, or silently
 *      ignore and allow the request to continue normally.
 *      return
 *          1 if found
 *          0 otherwise
 * */
int blacklist_find(void);

char region_find(void);
void server_set(void);

long long size_get(char *file_name, char *secondary_file_type);

/* Read in request and scan into global variables */
void request_read(void);

/* Log transaction in daily log */
void request_log(void);

/* Calculate time when transfer began */
unsigned long long starttime_calc(void);

/* Calculate the time for transferring the block */
int endtime_calc(unsigned long long starttime);
void end_transfertime_calc(void);
void expire_version_check(void);
int history_space_left(char *key);
void sql_edc_close(void);
void start_transfertime_calc(void);
void trans_transfertime_insert(void);

#endif
