#ifndef dfm_prototypes_h
#define dfm_prototypes_h

/* Holds define for DFM_FILE */
#include "dfmq.h"

/* Create directory on RET machine with specified files */
int opc_mkdir                           (char *dir, char *files[], long long size);

int dfm_send_dir                           (char *files[]);

/* Remove specified directory on RET machine */
short opc_rmdir                           (char *dir); 

/* Remove old project directories on RET machine */
short retdir_cleanup();

/* Add specified files to directory on RET machine */
/* List of files is terminated by pointer to NULL */
short opcdir_add_files                    (char *dir, char *files[]); 

/* Delete specified files from RET directory */
/* Last file on list is followed by pointer to NULL */
short opcdir_dlt_files(char *dir, char *files[]);


/* Display list of specified directory from RET machine */
/* Brings the list file from the database and puts it in a temporary directory */
/* On the user's machine called '/tmp' */
/* Opens the temporary file brought down so it is ready to read */
void dfm_globals_init(char *mysql_server, int sql_server_check);


/* Submit specified DFM job */
short dfm_job_submit(
    char *files[],
    char *control_file,
    char *gds_file,
    char *email_ptr);

int dfm_job_view(int req_type);
void opcjob_project_view(char *project);

/*Cancel RET job */
short dfm_job_cancel(int job_id);

/* Modify the priority of a job */
short opcjob_mod_priority(int job_id, char *job_command, int increment);

/* Put an RET job on hold */
short opcjob_hold(int job_id);

short opcjob_release(int job_id);

short opc_run_new_job();

short opc_run_multiple_jobs(int job_num);

short opcjob_mod_runtime(int job_id, long run_time);

/* Send list of files to delete after specified job completes */
short opcjob_files2dlt(int job_id, char *files[]);

int dfm_files_put(char *control_file, char *gds_file);


/* Display ps command from RET machine */
/* Brings the ps file from the database and puts it in a temporary directory */
/* On the user's machine called '/tmp/opctrans' */
/* Opens the temporary file brought down so it is ready to read */
OPC_FILE *opc_ps_open(void);

/* Read one entry from ps  file */
/* Pass in RET ps structure */
/* Function fills in structure and returns 0 on success */
/* Returns -1 if no more entries present */
int opc_ps_read(OPC_FILE *fi, char *entry);

/* Close PS file */
int opc_ps_close(OPC_FILE *fp);

/* Display output from PS command */
int opc_ps_view(char *dir);


/* Copy currently active RET server into server structure */
/* Returns name of active RET server */
/* Memory is global and does not have to be deallocated */
char *opc_server_name();

/* Initialize the RET server array */
/* First values from .opctrans file used */
/* Next default values are assigned */
/* Finally values are replaced from MySql database on server */
int dfm_server_init(char *opctrans_server);

/* Set an alternate server */
int dfm_server_set(char *name);


/* Values taken from dynamic array */


short dfm_socket_init(RET_REQ_TYPE req_type, int job_id, char *control_file,
char *gds_file, char *technology,  long long sendsize);

/* Send request to RET server */
short dfm_request_send(RET_REQ_TYPE req_type, int job_id, char *control_file, char *gds_file, char *technology, long increment);

short ret_job_num_get(long *job_id);

/* Send data to RET server */


/* Returns pointer to return message */
void opc_rtn(char *msg);

/* Verify the user is registered to use RETtrans */
short opc_checkreg();

/* Perform registration for the user */
short opc_autoreg(char *user_id, char *password, char *dept_name, char *mbg);



/* Return pointer to mesage received with database transaction */
/* A message is returned with all database transactions */
/* Storage for the message is handled by the database client */
/* Memory pointed to is global and does not need to be freed */
char * rtn_msg_get();


void keyword_create(char *new_keyword, char *key, int index);;

void keyword_create(
    char *new_keyword,	/* New keyword generated by this function */
    char *key,	/* Different string used for each transaction */
    int index);	/* Helps make the key more random */

/* Display active and queued RET jobs */
/* Brings the queue file from the database and puts it in a temporary directory */
/* On the user's machine called '/tmp' */
/* Opens the temporary file brought down so it is ready to read */


OPC_FILE *opcq_project_open(char *project);

OPC_FILE *opcq_open(void);

OPC_FILE *opcq_depend_open(void);

/* Read one entry from job queue display file */
/* Pass in DFMQ structure */
/* Function fills in structure and returns 0 on success */
/* Returns -1 if no more entries present */
int opcq_read_entry(OPC_FILE *fi, DFMQ *q);

/* Read one entry from depend job queue display file */
/* Pass in DFMQ structure */
/* Function fills in structure and returns 0 on success */
/* Returns -1 if no more entries present */
int opcq_read_depend_entry(OPC_FILE *fi, DFMQ *q);

/* Close queue file */
int opcq_close(OPC_FILE *fp);

/* Opens an RET file */
OPC_FILE *opc_file_open(char *root_name);

/* Audits the RET queue */
short opcq_audit();



#endif
