#ifndef ftp_info_h
#define ftp_info_h

#include "global_defines.h"
#include "trans_server_defines.h"


#ifdef INTERCOM
#define SITE_FILE "db_admin/site_file"
#define COMPANY_FILE "db_admin/company_file"

int company_cnt;

/* Define for company table */
typedef struct
{
    char name[COMPANY_LEN];
    char site[16];
} COMPANY_TABLE;

COMPANY_TABLE company_table[20];

/* Holds parameters about the transfer */
/* define for site table */
typedef struct
{
    char site[SITE_LEN];
    char login[64];
    char password[16];
    char machine[64];
    char address[20];
} X_LAN;


#endif /* define for INTERCOM */


#define FSO_FILE "db_admin/fso_companies"


#define FINALE_FILE_MSG \
"#!/bin/bash\n\
\n\
# Find the name of the file transferred\n\
basename=`basename $0 .finale`\n\
\n\
email_file=${basename}.email\n\
# This is the original file size calculated by the client\n\
\n\
original_file_size=%lld\n\
# This is the cksum calculated before the file was transferred\n\
original_cksum=%s\n\
\n\
# Indicate that an error was found, reset if no error found\n\
error=1\n\
\n\
SUPPORT_EMAIL=\"transbug@nxp.com\"\n\
\n\
# Get the name of the directory where the .finale script is\n\
cwd=`dirname $0`\n\
\n\
#create initial variables\n\
begin_date=`date`\n\
end_date=$begin_date\n\
\n\
send_email_and_exit()\n\
{\n\
    echo \"File name:  $basename\" >> $email_file\n\
    echo \"Directory:  `pwd`\"      >>$email_file\n\
    if [ $error -ne 0 ]\n\
    then\n\
         mv ${basename}.finale ${basename}.error\n\
    else\n\
        # remove the finale script no longer needed\n\
        rm -f ${basename}.finale\n\
        echo \"cksum:  $original_cksum\" >>$email_file\n\
        echo \"File size:  $file_size\" >>$email_file\n\
        echo \"Date before calculating cksum: $begin_date\" >>$email_file\n\
        echo \"Date after calculating cksum: $end_date\" >>$email_file\n\      
    fi\n\
    echo \"\" >>$email_file\n\
    echo \"Message generated by finale script at GLOBALFOUNDRIES\" >>$email_file\n\
    cat $email_file | mailx -t\n\
    cat $email_file\n\
    rm -f $email_file\n\
    exit 0 ## force good return code\n\
}\n\
\n\
\n\
# Change to the directory where the .finale script is\n\
cd_error=1\n\
if [ \"$cwd\" != \"\" ]\n\
then\n\
   echo \"Changing to directory $cwd\"\n\
   cd $cwd\n\
   cd_error=$?\n\
fi\n\
\n\
#check if it was possible to change to the .finale script is\n\
if [ $cd_error -ne 0 ]\n\
then\n\
  echo \"could not change dir to $cwd\"\n\
  exit $cd_error\n\
fi\n\
\n\
# Initialize the header for the e-mail which will be sent\n\
echo \"To: %s\" >$email_file\n\
echo \"From:  finale.script@globalfoundries.com\" >>$email_file\n\
echo \"Reply-To: $SUPPORT_EMAIL\"        >>$email_file\n\
\n\
# Set the name for the directory containing the split files\n\
splitname=${basename}.split\n\
# Verify the directory is present\n\
\n\
echo \"checking for presence of $splitname\"\n\
\n\
if [ ! -e \"$splitname\" ]\n\
then\n\
  echo \"$splitname does not exist.\"\n\
  echo  \"Subject:  Error transferring data to GLOBALFOUNDRIES\" >>$email_file\n\
  echo \"\" >>$email_file\n\
  echo \"Error -381:  Split data transferred to GLOBALFOUNDRIES\ was not found by the finale script.\" >>$email_file\n\
  send_email_and_exit\n\
fi\n\
\n\
# this file may exist in the server just for milliseconds\n\
rm -f ${splitname}/sftp.probe.txt\n\
\n\
# Combine split files into the original file\n\
echo \"Combining split files.\"\n\
cat ${splitname}/* >$basename\n\
\n\
# Make sure the file was created\n\
if [ ! -e \"$basename\" ]\n\
then\n\
  echo \"File $basename not created.\"\n\
  echo \"Subject: Error transferring data to GLOBALFOUNDRIES\" >>$email_file\n\
  echo \"\" >>$email_file\n\
  echo \"Error -381:  Combined Data transferred to GLOBALFOUNDRIES was not found by the finale script.\" >>$email_file\n\
  send_email_and_exit\n\
fi\n\
\n\
# Calculate the cksum for the file after it has been combined\n\
echo \"Calculating cksum.\"\n\
cksum=`cksum $basename | cut -f1 -d' '`\n\
end_date=`date`\n\
# If cksum is not correct, give an error\n\
if [ \"$cksum\"  != \"$original_cksum\" ]\n\
then\n\
  echo \"Subject:  Incorrect cksum for data transferred to GLOBALFOUNDRIES\" >>$email_file\n\
  echo \"\" >>$email_file\n\
  echo \"Error -382:  Incorrect cksum found.\" >>$email_file\n\
  echo \"Original cksum:  $original_cksum\" >>$email_file\n\
  echo \"Calculated cksum:  $cksum\" >>$email_file\n\
  send_email_and_exit\n\
fi\n\
\n\
# Now calculate the final file size\n\
file_size=`ls -l $basename | /usr/bin/awk '{print $5}'`\n\
if [ \"$file_size\" != \"$original_file_size\" ]\n\
then\n\
  echo \"Subject:  Incorrect cksum for data transferred to GLOBALFOUNDRIES\" >>$email_file\n\
  echo \"\" >>$email_file\n\
  echo \"Error -383:  Incorrect file size found.\" >>$email_file\n\
  echo \"Original file size:  $original_file_size\" >>$email_file\n\
  echo \"Calculated file size:  $file_size\" >>$email_file\n\
else\n\
  echo \"Subject:  Successful data transfer to GLOBALFOUNDRIES\" >>$email_file\n\
  echo \"\" >>$email_file\n\
  echo \"Data successfully transferred to GLOBALFOUNDRIES\" >>$email_file\n\
  rm -rf $splitname\n\
  error=0\n\
fi\n\
\n\
send_email_and_exit ## send email anyway\n\
\n\
"


typedef struct
{
    char local_file[FILE_SIZE];
    char encrypt_file[FILE_SIZE];
    char start_time[30];
    char encrypt_time[30];
    char encrypt_date[30];
    char local_transfer_time[30];
    char local_finish_time[30];
    char remote_transfer_time[30];
    char remote_finish_time[30];
    unsigned long long encrypt_size;
    unsigned long long transfer_size;
    unsigned long long local_block_size;
    int gdb_id;
    int first_block_offset;
    int adjusted_block_num;
    int encryption_done;
    size_t last_read_return;  // created to control serial block read serial_read_callback()
} FTP_TRANSFER_PARAMS;

#define PARALLEL_FINALE_MSG \
    "User file name:           %s\n\
    Cksum for local file:  %s\n\
    Remote file name:           %s\n\
    Remote directory:    %s%s\n\
    Command to combine file:  cat %s%s/* >%s\n\
    Encryption time:  %s\n\
    FTP transfer time:   %s\n\
    Original size:       %lld bytes\n\
    Compressed size:    %lld bytes\n\
    Encrypted size:      %lld bytes\n\
    Transfer size:      %lld bytes\n"

#define FINALE_MSG \
    "User file name:           %s\n\
    Cksum for local file:  %s\n\
    Remote file name:           %s\n\
    Remote directory:    %s%s\n\
    Encryption time:  %s\n\
    FTP transfer time:   %s\n\
    Original size:       %lld bytes\n\
    Compressed size:    %lld bytes\n\
    Encrypted size:      %lld bytes\n\
    Transfer size:      %lld bytes\n"

#define DECRYPT_COMMAND \
"echo 'Running script to combine and decrypt file.'\n\
cat %s%s/* |  gpg --s2k-mode N --output %s --decrypt -\n"

#define COMBINE_COMMAND  \
"echo 'Running script to combine files.'\n\
cat %s%s/* >%s"

#define DECRYPT_MSG \
"\nThe data has been split up into multiple small files.\n\
A script which can be used to combine the files and decrypt the\n\
resulting file is present in directory:\n\
    '%s%s'\n\
To run this script cd to %s%s and type:\n\
combine_decrypt.%s\n\
You will then be prompted for your passphrase.\n\n\
If you would like to combine the files without decrypting them\n\
execute the following commands:\n\
cd %s%s\n\
combine_script.%s\n\
The file created can then be decrypted at a later time.\n"

#define FTP_GET_MSG \
"ftp -v -n ftpgate0 <<!\n\
user \"%s@%s %s\" %s %s\n\
cd %s\n\
binary\n\
get %s data_files0/%s.gz.pgp\n\
bye\n\
! \n"

#define COMPANY_FILE "db_admin/company_file"
#define FTP_MAPPING "db_admin/ftp_mapping"

typedef struct
{
    char company[32];
    char name[32];
    char machine[32];
	char address[32];
    char login[32];
    char user[48];
    char password[48];
    char root_dir[128];
    char encrypt_key[64];
    int is_fso;
} COMPANY_DATA;

typedef struct
{
    char login[64];
    char password[64];
    char machine[64];
    char file_name[FILE_SIZE];
    char remote_dir[FILE_SIZE];
} FTPTRANS_DATA;

/* FTP errors */
#define FILE_NOT_FND -930
#define ftp_error "Error -931:  The following error was encountered while \n\
               trying to FTP to external server.\n\n"
#define FTP_ERROR -931
#define site_err "Error -932:    Unable to find routing data for site:\n\n\
               '%s'"
#define SITE_ERR -932
#define comp_err "Error -933:    Unable to find routing data for company:"
#define COMP_ERR -933

#define FTP_INFO_FILE "db_admin/ftp_info"

extern char ftp_command[FILE_SIZE];
extern char ftp_script[64];
extern char ftp_output[64];

typedef struct
{
    char login[64];
    char password[16];
    char machine[64];
} FTP_INFO;

extern FTP_INFO ftp;

typedef struct
{
    int cnt;
    char buffer[BLOCK_SIZE];
    char *ptr;
}  MAIL_INFO;

extern MAIL_INFO mail;

#endif /* Define for ftp_info_h */
